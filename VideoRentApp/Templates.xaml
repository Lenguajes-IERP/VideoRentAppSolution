<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTemplate x:Key="SubMenu_Template" TargetType="{x:Type MenuItem}">
        <Border x:Name="border"
            Background="#2E333A"
            BorderBrush="#2E333A"
            BorderThickness="0"
            Height="50"
            Width="230">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" />
                    <ColumnDefinition Width="13" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemSubmenuArrowColumnGroup" />
                    <ColumnDefinition Width="10" />
                </Grid.ColumnDefinitions>

                <ContentPresenter x:Name="Icon"
                              Grid.Column="0"
                              ContentSource="Icon"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Margin="5,0,0,0" />
                <ContentPresenter ContentSource="Header"
                              Grid.Column="2"
                              TextBlock.Foreground="White"
                              TextBlock.FontFamily="Fonts/#Roboto Light" TextBlock.FontSize="20"
                              HorizontalAlignment="Left"
                              RecognizesAccessKey="True"
                              VerticalAlignment="Center" />

                <Path x:Name="SubmenuArrowIndicator"
                  Grid.Column="3"
                  Data="M 0 0 L 4 3.5 L 0 7 Z"
                  Fill="White"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Visibility="Collapsed" />

                <Popup x:Name="PART_Popup"
                   AllowsTransparency="true"
                   Focusable="false"
                   HorizontalOffset="-2"
                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   VerticalOffset="0">

                    <Border x:Name="SubMenuBorder"
                        Background="#2E333A"
                        BorderBrush="#404D5B" BorderThickness="1">
                        <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="True">
                            <ItemsPresenter x:Name="ItemsPresenter"
                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                        Grid.IsSharedSizeScope="True"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        KeyboardNavigation.TabNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="Icon" Value="Visible" />
            </Trigger>
            <Trigger Property="HasItems" Value="True">
                <Setter Property="Visibility" TargetName="SubmenuArrowIndicator" Value="Visible" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="border" Value="#404D5B" />
                <Setter Property="BorderBrush" TargetName="border" Value="#404D5B" />
                <Setter TargetName="SubmenuArrowIndicator" Property="Fill" Value="White" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Menu_Template"
                     TargetType="{x:Type MenuItem}">
        <Border x:Name="border"
                Background="#2E333A"
                BorderBrush="#2E333A"
                BorderThickness="0" Height="50"
                Width="230">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" Width="Auto" />
                    <ColumnDefinition Width="13" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>

                <ContentPresenter x:Name="Icon"
                                  ContentSource="Icon"
                                  HorizontalAlignment="Left" Height="35"
                                  Width="35"
                                  Margin="10,0,0,0"
                                  VerticalAlignment="Center" />

                <ContentPresenter ContentSource="Header"
                                  Grid.Column="2"
                                  TextBlock.Foreground="#FFFFFF"
                                  TextBlock.FontFamily="Fonts/#Roboto Light" TextBlock.FontSize="20"
                                  HorizontalAlignment="Left"
                                  RecognizesAccessKey="True"
                                  Margin="3,0,0,0"
                                  VerticalAlignment="Center" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <!-- This trigger seems to intend to make Icon visible even if Icon property is null, which is unusual.
                     Typically, you'd set it to Collapsed if Icon is null.
                     If the goal is to always show a placeholder or ensure space, this might be intentional.
                     For standard behavior (hide if no icon), this should be Collapsed.
                     Keeping as per original for now. -->
                <Setter Property="Visibility" TargetName="Icon" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="Icon" Value="Visible" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="border" Value="#404D5B" />
                <Setter Property="BorderBrush" TargetName="border" Value="#404D5B" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Item_Template"
                     TargetType="{x:Type MenuItem}">
        <Border x:Name="border"
                Background="#2E333A"
                BorderBrush="#2E333A"
                BorderThickness="{TemplateBinding BorderThickness}" Height="50"
                Width="230">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" Width="Auto" />
                    <ColumnDefinition Width="13" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>

                <ContentPresenter x:Name="Icon"
                                  ContentSource="Icon"
                                  HorizontalAlignment="Center" Height="35"
                                  Width="35"
                                  Margin="10,0,0,0"
                                  VerticalAlignment="Center" />

                <ContentPresenter ContentSource="Header"
                                  Grid.Column="2"
                                  TextBlock.Foreground="White"
                                  TextBlock.FontFamily="Fonts/#Roboto Light" TextBlock.FontSize="20"
                                  HorizontalAlignment="Left"
                                  RecognizesAccessKey="True"
                                  Margin="3,0,0,0"
                                  VerticalAlignment="Center" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="Icon" Value="Visible" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="border" Value="#404D5B" />
                <Setter Property="BorderBrush" TargetName="border" Value="#404D5B" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!--// Maximize / Minimize App Button Style //-->

    <ImageBrush x:Key="max_def"
                ImageSource="Assets/max_def.png"
                Stretch="None" />

    <ImageBrush x:Key="max_mo"
                ImageSource="Assets/max_mo.png"
                Stretch="None" />
    <Style x:Key="MaxBtnStyle"
           TargetType="{x:Type Button}">

        <Setter Property="Height"
                Value="35" />
        <Setter Property="Width"
                Value="35" />
        <Setter Property="HorizontalAlignment"
                Value="Right" />
        <Setter Property="VerticalAlignment"
                Value="Top" />
        <Setter Property="Margin"
                Value="0,20,60,0" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="border"
                            BorderThickness="0"
                            Background="{StaticResource max_def}" />

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver"
                                 Value="True">

                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource max_mo}" />

                        </Trigger>

                        <Trigger Property="IsPressed"
                                 Value="True">

                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource max_mo}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>


    </Style>
    <!--// Close App Button Style //-->

    <ImageBrush x:Key="close_def"
                ImageSource="Assets/shutdown_def.png"
                Stretch="None" />

    <ImageBrush x:Key="close_mo"
                ImageSource="Assets/shutdown_mo.png"
                Stretch="None" />

    <Style x:Key="CloseBtnStyle"
           TargetType="{x:Type Button}">

        <Setter Property="Height"
                Value="35" />
        <Setter Property="Width"
                Value="35" />
        <Setter Property="HorizontalAlignment"
                Value="Right" />
        <Setter Property="VerticalAlignment"
                Value="Top" />
        <Setter Property="Margin"
                Value="0,20,18,0" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="border"
                            BorderThickness="0"
                            Background="{StaticResource close_def}" />

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver"
                                 Value="True">

                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource close_mo}" />

                        </Trigger>

                        <Trigger Property="IsPressed"
                                 Value="True">

                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource close_mo}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>


    </Style>


</ResourceDictionary>